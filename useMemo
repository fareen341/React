import React, { useEffect } from 'react'
import axios from "axios";
import { useState } from 'react';
import { useMemo } from 'react';


export const AxiosGet = () => {
    const [data, setData] = useState(null);
    const [toggle, setToggle] = useState(false);
    
        useEffect(() => {
            axios.get("https://jsonplaceholder.typicode.com/comments")
            .then((response)=> {
                    setData(response.data);
                    console.log("api call");
                });
        }, []);       


        const findLongestName = (comments) => {
            if (!comments) return null;

            let longestName = "";
            for (let i=0; i< comments.length; i++){
                let currentName = comments[i].name;
                if (currentName.length > longestName.length){
                    longestName = currentName;
                }
            }
            console.log("this was computed");
            return longestName;
        };

        const getLongestName = useMemo(() => findLongestName(data), [data])
        // [data] parameter tells when to recompute, so [data] means whenever data changes recompute it othervise don't 
        // if we write [toggle] here that means toggle value changes from true to false so the data inside find longest name will run every time toggle value changes
        

                return (
                    <div>
                        <h1>{getLongestName}</h1>
                        <button 
                        onClick = {() =>{
                            setToggle(!toggle);
                        }}
                        >
                            {" "}
                            Toggle btn
                            </button>
                        {toggle && <h1>toggle</h1>}
                    </div>
                );
        };
